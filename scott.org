* Programming Language Pragmatics
- M Scott

** Chapter 1

- Difference in GCD algorithm between different types of languages

#+BEGIN_SRC c
  int gcd(int a, int b) {
    while(a!=b) {
      if (a > b) a = a -b;
      else b = b - a;
    }
  }
#+END_SRC

And in Scheme

#+BEGIN_SRC scheme
  (define gcd
    (lambda (a b)
      (cond ((= a b) a)
            ((> a b) (gcd (- a b)b))
            (else (gcd (- b a) a)))))
#+END_SRC

And finally in Prolog (which I have never seen before)

#+BEGIN_SRC prolog
  gcd(A, B, G) :- A = B, G = A.
  gcd(A, B, G) :- A > B, C is A-B, gcd(C, B, G).
  gcd(A, B, G) :- B > A, C is B-A, gcd(C, A, G).
#+END_SRC

In prolog, ~if~ maps to ~:-~ and ~and~ maps to ~,~

#+BEGIN_SRC c :name gcd.c
  int main() {
    int i = getint(), j = getint();
    while (i != j) {
      if (i > j) i = i - j;
      else j = j - i;
    }
    putint(i);
  }
#+END_SRC

#+BEGIN_SRC python :session :tangle reader.py :results none
  def read_file(file):
      with open(file) as fileobj:
          for word in fileobj:
              for ch in word:
                  print ch
#+END_SRC

#+BEGIN_SRC python :session :results value
read_file("gcd.c")
#+END_SRC

#+RESULTS:

Weirdly enough, I can't get Python to write to the org buffer. That's unfortunate. However, when I use the code above, I end up with far too many newlines. I'd actually need to deal with each character as I go to actually lex the file. 

I'll keep improving it as I go along. 

#+BEGIN_SRC python :session
  x = "teststr123"
  z = "filter(func, list)"
  #letters only
  filter(lambda x: x in s.ascii_letters, x)
  ##or using list comprehensions
  y = [x for x in x if x in s.ascii_letters]
  ##numbers only
  filter(lambda x: x in s.digits, x)
  ## punctuation only
  filter(lambda x: x in s.punctuation, z)
  def is_number(char):
      if char in s.digits:
          return char
      else:
          pass

  map(is_number, nums)
  strings = 'richie'
  map(is_number, strings)
  def make_comparator(list):
      def comp(char):
          if char in list:
              return char
          else:
              pass
      return(comp)
  is_letter=make_comparator(s.ascii_letters)
#+END_SRC

So that's nice. I messed around with parsing, found the string module (which is awesome), and then used its constants to save me some problems. Additionally, I wrote a function that can be used to make comparators which I can use for lexing as I move along this book. 

** Chapter 2

Yay, he gives psuedocode for a scanner for a calculator.
That seems like it's worth implementing. 

*** Grammar
The language has the following symbols

| Meaning | Symbol           |        |
|---------+------------------+--------|
| assign  | `:=`             |        |
| plus    | +                |        |
| minus   | -                |        |
| times   | *                |        |
| div     | /                |        |
| lparen  | (                |        |
| rparen  | )                |        |
| id      | letter (letter \ | digit) |
| number  | digit digit * |digit*(. digit|digit) digit* |        |

Hmmm, parser descriptions don't work well with org-tables.Sadface


